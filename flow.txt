COMPLETE FLOW OF APPLICATION:
1. In "localhost:3000/signup", the user will input username and email, and upon submission, frontend will send: "POST localhost:5000/api/user/invite" to backend, which will create an Invite object storing the username, email, expiration time, and invitaion_key AKA ikey.
  - Possible failure is if email and/or username exists, which will then cause the user to go back to "/signup" page with "Username or Email is already in use"
  - Possible scenario is if they input an email that is assigned to an Invite but NOT a User, then update the Invite with the new username inputted, new ikey, and new expiration time
  - Frontend/backend needs to have input validation here for username and email. If invalid, then display a message to the user.
2. Backend will then send the link to the inputted email with the randomized ikey. Link will be something like "http:/localhost:3000/signup/invite/123someRandomString456", which on the frontend, the route will be "/signup/invite/:ikey"
3. When the user clicks on the email and takes them to the link, the frontend will IMMEDIATELY send: "GET localhost:5000/api/user/invite/123someRandomString456" to the backend. This request matches with the "app.get('/user/invite/:ikey')" endpoint, which gets the invite and sends it back to the frontend.
  - Possible failure is if the Invite does not exist OR if the server time is PAST the expiration time, then response is status code 400, and the frontend will need to redirect them to the initial "localhost:300/signup" page with an error "Invalid Invitation"
  - Assuming the response is 200, then the frontend will display "Hi, *username*" alongside the rest of the signup page
4. Still in, "http:/localhost:3000/signup/invite/123someRandomString456", User will fill all of the information and upon submission, frontend will send: "POST localhost:5000/api/user" ALONGSIDE the *ikey* in the body to the backend, which the backend then use to verify and will create a User object storing everything else required for a user object.
  - Possible failure here is if it is too late and the Invitation is invalid, then it will send a status code of 400, and the frontend will need to redirect them to the initial "localhost:300/signup" page with an error "Invalid Invitation"
  - Possible failure here is if input validation claims it failed. (For example, if the password is too short). Then it stays on the same page, but with the corresponding incorrect input message (so it should tell the user their password is too short)
5. After successful User creation, the frontend will redirect to login page: "localhost:3000/"
6. When the user types their username and password, it will send a "PUT http://localhost:5000/api/user" to the backend which the backend will create and store a jwt, and send it as a response to the frontend, and the frontend will save the jwt
  - Possible failure here is if either the username or password doesn't exist. The backend will send the corresponding message which the frontend will use to display in the login page.
7. Upon successful login, the frontend is redirected to "localhost:3000/home", and will IMMEDIATELY send: "GET localhost:5000/api/user" with the jwt in the header for the backend. Backend will then decode it, and send the corresponding User back to the frontend.
  - Possible failure here is if the token is invalid or does not exist, which will then redirect the frontend to "localhost:3000/"
8. Home page will display everything, and that is all for now